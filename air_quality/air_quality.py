import tkinter as tk
from tkinter import Label, Button
import random
import pyodbc
import matplotlib.pyplot as plt
from datetime import datetime
import threading
import time

# C·∫•u h√¨nh k·∫øt n·ªëi SQL Server
SERVER = 'localhost'  # Thay b·∫±ng t√™n server c·ªßa b·∫°n
DATABASE = 'AirQuality'  # T√™n database
# USERNAME = ''  # Username SQL Server
# PASSWORD = 'Ngocty1912'  # Password SQL Server

# K·∫øt n·ªëi SQL Server
#conn = pyodbc.connect(f'DRIVER={{SQL Server}};SERVER={SERVER};DATABASE={DATABASE};UID={USERNAME};PWD={PASSWORD}')
#conn = pyodbc.connect(f'DRIVER={{SQL Server}};SERVER={SERVER};DATABASE={DATABASE};Trusted_Connection=yes;')
conn = pyodbc.connect(f'DRIVER={{SQL Server}};SERVER={SERVER};DATABASE=master;Trusted_Connection=yes;')
cursor = conn.cursor()

# T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
cursor.execute("""
IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='AirQuality' AND xtype='U')
CREATE TABLE AirQuality (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    Timestamp DATETIME,
    PM25 FLOAT,
    CO2 FLOAT,
    Temperature FLOAT,
    Humidity FLOAT
)
""")
conn.commit()

# H√†m c·∫≠p nh·∫≠t d·ªØ li·ªáu gi·∫£ l·∫≠p
def update_air_quality():
    while True:
        pm25 = random.uniform(5, 300)  # Ch·ªâ s·ªë b·ª•i m·ªãn PM2.5 (¬µg/m¬≥)
        co2 = random.uniform(300, 5000)  # N·ªìng ƒë·ªô CO2 (ppm)
        temp = random.uniform(15, 40)  # Nhi·ªát ƒë·ªô (¬∞C)
        humidity = random.uniform(20, 90)  # ƒê·ªô ·∫©m (%)

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        cursor.execute("INSERT INTO AirQuality (Timestamp, PM25, CO2, Temperature, Humidity) VALUES (?, ?, ?, ?, ?)",
                       (timestamp, pm25, co2, temp, humidity))
        conn.commit()

        # C·∫≠p nh·∫≠t giao di·ªán
        app.update_display(pm25, co2, temp, humidity)

        time.sleep(2)  # C·∫≠p nh·∫≠t m·ªói 2 gi√¢y

# H√†m hi·ªÉn th·ªã d·ªØ li·ªáu tr√™n bi·ªÉu ƒë·ªì
def show_chart():
    cursor.execute("SELECT TOP 10 Timestamp, PM25, CO2, Temperature, Humidity FROM AirQuality ORDER BY ID DESC")
    data = cursor.fetchall()

    if data:
        timestamps, pm25_values, co2_values, temp_values, humidity_values = zip(*data)

        plt.figure(figsize=(8, 4))
        plt.plot(timestamps, pm25_values, marker='o', linestyle='-', color='red', label="PM2.5")
        plt.plot(timestamps, co2_values, marker='s', linestyle='-', color='blue', label="CO2")
        plt.plot(timestamps, temp_values, marker='^', linestyle='-', color='green', label="Nhi·ªát ƒë·ªô")
        plt.plot(timestamps, humidity_values, marker='x', linestyle='-', color='orange', label="ƒê·ªô ·∫©m")
        
        plt.xlabel("Th·ªùi gian")
        plt.ylabel("Gi√° tr·ªã ƒëo")
        plt.xticks(rotation=45)
        plt.title("Ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠ trong 10 l·∫ßn ƒëo g·∫ßn nh·∫•t")
        plt.legend()
        plt.grid()
        plt.show()
    else:
        print("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã!")

# L·ªõp giao di·ªán ch√≠nh
class AirQualityApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Gi√°m s√°t Ch·∫•t l∆∞·ª£ng Kh√¥ng Kh√≠")

        Label(root, text="H·ªá th·ªëng gi√°m s√°t kh√¥ng kh√≠", font=("Arial", 16, "bold")).pack()

        self.pm25_label = Label(root, text="PM2.5: -- ¬µg/m¬≥", font=("Arial", 14))
        self.pm25_label.pack()

        self.co2_label = Label(root, text="CO2: -- ppm", font=("Arial", 14))
        self.co2_label.pack()

        self.temp_label = Label(root, text="Nhi·ªát ƒë·ªô: -- ¬∞C", font=("Arial", 14))
        self.temp_label.pack()

        self.humidity_label = Label(root, text="ƒê·ªô ·∫©m: -- %", font=("Arial", 14))
        self.humidity_label.pack()

        self.warning_label = Label(root, text="", font=("Arial", 14, "bold"), fg="red")
        self.warning_label.pack()

        Button(root, text="Xem bi·ªÉu ƒë·ªì ch·∫•t l∆∞·ª£ng kh√¥ng kh√≠", command=show_chart, font=("Arial", 12)).pack(pady=10)

    # H√†m c·∫≠p nh·∫≠t giao di·ªán v·ªõi d·ªØ li·ªáu m·ªõi
    def update_display(self, pm25, co2, temp, humidity):
        self.pm25_label.config(text=f"PM2.5: {pm25:.2f} ¬µg/m¬≥")
        self.co2_label.config(text=f"CO2: {co2:.2f} ppm")
        self.temp_label.config(text=f"Nhi·ªát ƒë·ªô: {temp:.2f} ¬∞C")
        self.humidity_label.config(text=f"ƒê·ªô ·∫©m: {humidity:.2f} %")

        # C·∫£nh b√°o n·∫øu kh√¥ng kh√≠ √¥ nhi·ªÖm
        if pm25 > 100 or co2 > 1000:
            self.warning_label.config(text="‚ö†Ô∏è C·∫¢NH B√ÅO: Kh√¥ng kh√≠ √¥ nhi·ªÖm!", fg="red")
        else:
            self.warning_label.config(text="üåø Kh√¥ng kh√≠ trong l√†nh", fg="green")

# Kh·ªüi t·∫°o ·ª©ng d·ª•ng
root = tk.Tk()
app = AirQualityApp(root)

# Ch·∫°y c·∫≠p nh·∫≠t d·ªØ li·ªáu trong lu·ªìng ri√™ng
threading.Thread(target=update_air_quality, daemon=True).start()

# Ch·∫°y giao di·ªán
root.mainloop()
