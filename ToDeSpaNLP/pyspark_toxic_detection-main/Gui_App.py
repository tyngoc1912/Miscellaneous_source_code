# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'my_ui2.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import datetime
import pickle
from PyQt5 import QtCore, QtGui, QtWidgets
import json
from GraphAPI import *
from CheckPoison import *
import pandas as pd

from pyspark.sql import SparkSession



class Ui_MainWindow(object):

    def __init__(self):
        self.graph = Graph(page_access_token, page_id)
        self.setupUi(MainWindow)


        self.spark = SparkSession.builder.appName('InsaneApp').master('local[2]').getOrCreate()
        self.classifier = PipelineModel.load('text_classifier')



    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1434, 797)
        MainWindow.setMaximumSize(QtCore.QSize(1434, 797))
        MainWindow.setAutoFillBackground(False)
        MainWindow.setStyleSheet("")
        MainWindow.setDocumentMode(False)
        MainWindow.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pull_comments_button = QtWidgets.QPushButton(self.centralwidget)
        self.pull_comments_button.setGeometry(QtCore.QRect(120, 660, 181, 91))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.pull_comments_button.setFont(font)
        self.pull_comments_button.setStyleSheet("")
        self.pull_comments_button.setCheckable(False)
        self.pull_comments_button.setChecked(False)
        self.pull_comments_button.setObjectName("pull_comments")
        self.pull_comments_button.clicked.connect(self.pull_all_comments)

        self.check_poison_button = QtWidgets.QPushButton(self.centralwidget)
        self.check_poison_button.setGeometry(QtCore.QRect(320, 660, 181, 91))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.check_poison_button.setFont(font)
        self.check_poison_button.setCheckable(False)
        self.check_poison_button.setChecked(False)
        self.check_poison_button.setObjectName("check_poison")

        self.check_poison_button.clicked.connect(self.check_poison)

        self.delete_all_button = QtWidgets.QPushButton(self.centralwidget)
        self.delete_all_button.setGeometry(QtCore.QRect(520, 660, 181, 91))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.delete_all_button.setFont(font)
        self.delete_all_button.setCheckable(False)
        self.delete_all_button.setChecked(False)
        self.delete_all_button.setObjectName("delete_all")

        self.delete_all_button.clicked.connect(self.delete_comments)

        self.logsBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.logsBrowser.setGeometry(QtCore.QRect(0, 80, 851, 561))
        self.logsBrowser.setAutoFormatting(QtWidgets.QTextEdit.AutoBulletList)
        self.logsBrowser.setObjectName("logsBrowser")

        self.statisticBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.statisticBrowser.setGeometry(QtCore.QRect(850, 80, 581, 561))
        self.statisticBrowser.setAutoFormatting(QtWidgets.QTextEdit.AutoBulletList)
        self.statisticBrowser.setObjectName("textBrowser_2")
        self.logsLabel = QtWidgets.QLabel(self.centralwidget)
        self.logsLabel.setGeometry(QtCore.QRect(360, 30, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.logsLabel.setFont(font)
        self.logsLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.logsLabel.setAutoFillBackground(True)
        self.logsLabel.setTextFormat(QtCore.Qt.RichText)
        self.logsLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.logsLabel.setObjectName("logsLabel")
        self.statisticLabel = QtWidgets.QLabel(self.centralwidget)
        self.statisticLabel.setGeometry(QtCore.QRect(1080, 30, 121, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        self.statisticLabel.setFont(font)
        self.statisticLabel.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.statisticLabel.setAutoFillBackground(True)
        self.statisticLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.statisticLabel.setObjectName("statisticLabel")
        MainWindow.setCentralWidget(self.centralwidget)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def clear_and_display_text(self, text, ):
        """
        This method display text on the self.textBrowser
        """
        self.textBrowser.clear()
        self.textBrowser.setText(text)
    
    
    def pull_all_comments(self):
        """
        This method will pull all comments from the fb page
        and save to a pyspark DataFrame
        """
        # first pull all posts
        # self.clear_and_display_text('Pulling comments from pages')

        all_posts = self.graph.get_all_post()['data']

        all_posts_id = [x['id'] for x in all_posts]


        all_cmts_data = []
        for post_id in all_posts_id:

            cmts = self.graph.pull_post_cmts(post_id)
            all_cmts_data.extend(cmts)

        # self.logsBrowser.clear()
        self.statisticBrowser.append(f'{self.get_current_time()} - Pull {len(all_cmts_data)} comments from {len(all_posts_id)} posts.')
        self.logsBrowser.append('-'*150)

        for cmt in all_cmts_data:
            self.logsBrowser.append(cmt['message']) 

        self.save_cmts(all_cmts_data)


    def load_cmts_to_df(self, path):
        cmts = pickle.load(open(path, 'rb'))

    def get_current_time(self) -> str:
        """
        return current time as a string
        """
        return str(datetime.datetime.now().time())

    def save_cmts(self, cmts):
        """
        save cmts to a csv
        """
        df = pd.DataFrame([], columns = ['id', 'free_text'])
        for cmt in cmts:
            df = df.append({'free_text': cmt['message'], 'id': cmt['id']}, ignore_index= True)

        self.data_path = f"saved_comments/{self.get_current_time().replace(':', '_')}_cmts.csv"

        df.to_csv(path_or_buf=self.data_path, index = False, encoding= 'utf-8')

        
    def check_poison(self) -> None:
        """
        Load cmts from self.data_path, use model to check for poisonous, save result dataframe to self.poison_result
        """
        self.statisticBrowser.append('Checking for poisonouse comments ...')


        df = self.spark.read.option('inferSchema', 'true').option('header', True).csv(self.data_path)
            

            
        self.poison_result =  self.classifier.transform(df).select('id', 'free_text', 'prediction').toPandas()

        if len(self.poison_result['prediction'].value_counts()) > 1:

            self.statisticBrowser.append(f"Completed! Detect {self.poison_result['prediction'].value_counts()[1]} poisonous comments.")
        else:
            self.statisticBrowser.append(f"Completed! Detect 0 poisonous comments.")

        self.logsBrowser.append(r'-'*50 + 'POISONOUS_COMMENTS' + '-'*50)
        
        for cmt in self.poison_result.loc[self.poison_result['prediction'] == 1, 'free_text']:
            self.logsBrowser.append(cmt)

    def delete_comments(self) -> None:
        """
        delete all detected poisonous comments
        """
        poisonous_ids = self.poison_result.loc[self.poison_result['prediction'] == 1,'id' ].values

        if len(poisonous_ids) == 0:
            self.statisticBrowser.append('There is no poisonous comment to delete!')
        else:
            for id in poisonous_ids:
                self.graph.delete_cmt_or_post(str(id))

            self.statisticBrowser.append('All poisonous comments have been terminated.')
        
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Insane App - " + self.graph.get_page_name()))
        MainWindow.setWhatsThis(_translate("MainWindow", "<html><head/><body><p>This is nothing</p></body></html>"))
        self.pull_comments_button.setText(_translate("MainWindow", "Pull Comments"))
        self.check_poison_button.setText(_translate("MainWindow", "Check Poison"))
        self.delete_all_button.setText(_translate("MainWindow", "Delete all"))
        self.logsLabel.setText(_translate("MainWindow", "Logs"))
        self.statisticLabel.setText(_translate("MainWindow", "Statistics"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    MainWindow.show()
    sys.exit(app.exec_())
